# cloudbuild.yaml

# 이 파일은 GitHub 저장소의 루트 디렉토리에 위치해야 합니다.
# Cloud Build가 이 파일을 읽고 빌드 단계를 실행합니다.

steps:
# 1. Docker 이미지 빌드 단계
# Cloud Build의 공식 Docker 빌더 이미지를 사용합니다.
# `.`은 Dockerfile이 현재 빌드 컨텍스트(즉, 저장소의 루트 디렉토리)에 있음을 의미합니다.
# -t 플래그는 빌드된 Docker 이미지에 태그를 지정합니다.
# 태그 형식: [리전]-docker.pkg.dev/[프로젝트 ID]/[Artifact Registry 저장소 이름]/[이미지 이름]:[태그]
# $PROJECT_ID: Cloud Build가 자동으로 현재 GCP 프로젝트 ID로 대체합니다.
# $COMMIT_SHA: Cloud Build가 자동으로 현재 Git 커밋의 SHA 값으로 대체됩니다.
#             이것은 이미지 버전을 관리하는 데 매우 유용합니다.
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'asia-northeast3-docker.pkg.dev/$PROJECT_ID/my-fastapi-repo/my-fastapi-app:$COMMIT_SHA',
    '-f', 'docker-images/python3.11-slim.dockerfile', # 이 줄이 추가되거나 수정됩니다.
    '.' # 이 부분은 빌드 컨텍스트를 저장소 루트로 유지하여 Dockerfile 내의 상대 경로가 올바르게 작동하도록 합니다.
  ]

# 2. 빌드된 Docker 이미지를 Artifact Registry에 푸시하는 단계
# 빌드된 이미지를 Artifact Registry로 업로드합니다.
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'push', 'asia-northeast3-docker.pkg.dev/$PROJECT_ID/my-fastapi-repo/my-fastapi-app:$COMMIT_SHA'
  ]

# 빌드된 이미지 목록을 명시합니다.
# 이 섹션은 Cloud Build가 어떤 이미지가 빌드되었는지 추적하는 데 도움이 됩니다.
images:
- 'asia-northeast3-docker.pkg.dev/$PROJECT_ID/my-fastapi-repo/my-fastapi-app:$COMMIT_SHA'

options:
  # 로그를 Cloud Logging으로만 전송하고 Cloud Storage에는 저장하지 않습니다.
  logging: CLOUD_LOGGING_ONLY
